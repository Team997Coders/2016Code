// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team997.robot.subsystems;

import org.usfirst.frc.team997.robot.Robot;
import org.usfirst.frc.team997.robot.RobotMap;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.SpeedController;

import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class Gatherer extends PIDSubsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController armAngleMotor = RobotMap.gathererArmAngleMotor;
    private final AnalogPotentiometer armAngleSensor = RobotMap.gathererArmAngleSensor;
    private final SpeedController gathererWheelMotor = RobotMap.gathererGathererWheelMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public boolean upLimit = false;
    public boolean downLimit = false;
    public boolean currentLimit = false;

    // Initialize your subsystem here
    public Gatherer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("Gatherer", 1.0, 0.0, 0.0);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("Gatherer", "PIDSubsystem Controller", getPIDController());
        getPIDController().setInputRange(0.0, 5.0);
        getPIDController().setOutputRange(-0.5, 0.5);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return armAngleSensor.get();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }

    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        //armAngleMotor.pidWrite(output);
        this.rawArmVoltage(output);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }
    
    public void rawArmVoltage(double voltage) {
    	// set the voltage into the gatherer arm motors (but impose limits)!
    	upLimit = false;
    	downLimit = false;
    	currentLimit = false;
    	
    	if (armAngleSensor.get() < RobotMap.gatherDownLimit) {
    		armAngleMotor.set(0);
    		downLimit = true;
    		return;
    	} else if (armAngleSensor.get() > RobotMap.gatherUpLimit) {
    		armAngleMotor.set(0);
    		upLimit = true;
    		return;
    	} else if (Robot.pdp.getCurrent(RobotMap.pdpGatherAngle0) > RobotMap.gatherAngleCurrentLimit ||
    				Robot.pdp.getCurrent(RobotMap.pdpGatherAngle1) > RobotMap.gatherAngleCurrentLimit) {
    		armAngleMotor.set(0);
    		currentLimit = true;
    		return;
    	} else {
    		armAngleMotor.set(voltage);
    		return;
    	}
    }
    
    public void stop() {
    	gathererWheelMotor.set(0);
    	armAngleMotor.set(0);
    }
    
    public boolean atSetpoint() {
    	return Math.abs(armAngleSensor.get() - this.getSetpoint()) > RobotMap.gathererAngleTolerance;
    }
    
    public void setWheelVoltage(double voltage) {
    	gathererWheelMotor.set(voltage);
    }
    
    public void updateDashboard() {
    	SmartDashboard.putNumber("Gatherer Position", armAngleSensor.get());
    	SmartDashboard.putNumber("Gatherer PID Setpoint", getPIDController().getSetpoint());
    	SmartDashboard.putBoolean("Gatherer Up Limit", upLimit);
    	SmartDashboard.putBoolean("Gatherer Down Limit", downLimit);
    	SmartDashboard.putBoolean("Gatherer Current Limit", currentLimit);
    	SmartDashboard.putBoolean("Gatherer PID Enabled?", this.getPIDController().isEnabled());
    }
}
