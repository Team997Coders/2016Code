// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team997.robot.subsystems;

import org.usfirst.frc.team997.robot.RobotMap;
import org.usfirst.frc.team997.robot.commands.*;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.Counter;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.smartdashboard.*;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Shooter extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController shooterMotor = RobotMap.shooterShooterMotorPort;
    private final SpeedController shooterAngleMotor = RobotMap.shooterShooterAngleMotorPort;
    private final AnalogPotentiometer shooterAngleSensor = RobotMap.shooterShooterAngleSensor;
    private final PIDController shooterAngleController = RobotMap.shooterShooterAngleController;
    private final DigitalInput shooterSpeedSensor = RobotMap.shooterShooterSpeedSensor;
    private final Servo ballControlServoL = RobotMap.shooterBallControlServoL;
    private final Servo ballControlServoR = RobotMap.shooterBallControlServoR;
    private final AnalogInput ballDistSensor = RobotMap.shooterBallDistSensor;
    private final Counter shooterCounter = RobotMap.shooterCounter;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private double period = 1000.0;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
   
    // Note that all the shooter methods use 'period' and not 'speed/rpm' this make the work
    // easier with one less inversion in the calculations.  The sensor is tracking time intervals
    // which aligns better with the period.
    
    public double getPeriod() {
    	return period;
    }
    
    public void spinup(double speed) {
    	// this is just the initial spinup speed to apply to the wheels.  The 
    	// next method will be used to track it.
    	shooterMotor.set(speed);
    	period = shooterCounter.getPeriod();
    	SmartDashboard.putNumber("Shooter Period", period);
    }
    
    public void trackShooterSpeed(double setpoint) {
    	// this routine should be called in the shooting loop to hold the shooter
    	// wheels at speed.
    	period = shooterCounter.getPeriod();
    	if (period < setpoint) {
    		shooterMotor.set(0);
    	} else {
    		shooterMotor.set(1.0);
    	}
    	SmartDashboard.putNumber("Shooter Period setpoint", setpoint);
    	SmartDashboard.putNumber("Shooter Period", period);
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

