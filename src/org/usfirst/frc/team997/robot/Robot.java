// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team997.robot;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import org.usfirst.frc.team997.robot.commands.*;
import org.usfirst.frc.team997.robot.subsystems.*;
import com.analog.adis16448.frc.ADIS16448_IMU;

import java.io.File;
import java.util.TimeZone;

import org.usfirst.frc.team997.robot.DataLogger;

import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	Command AutoDoNothing;

	public static OI oi;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static Shooter shooter;
    public static Gatherer gatherer;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static final PowerDistributionPanel pdp = new PowerDistributionPanel();

	DriverStation driverStation = DriverStation.getInstance();
	DataLogger dataLogger;
	Command autonomousCommand;
	SendableChooser chooser;
	ADIS16448_IMU imu;

	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	@Override
	public void robotInit() {

		RobotMap.init();

		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        shooter = new Shooter();
        gatherer = new Gatherer();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        imu = new ADIS16448_IMU();

		// OI must be constructed after subsystems. If the OI creates Commands
		// (which it very likely will), subsystems are not guaranteed to be
		// constructed yet. Thus, their requires() statements may grab null
		// pointers. Bad news. Don't move it.

		oi = new OI();

		chooser = new SendableChooser();
		chooser.addDefault("Default Auto", new AutoDoNothing());
		chooser.addObject("Autonomous: Shoot Low Bar!", new AutoShoot1());
		chooser.addObject("Autonomous: Breach!", new AutoBreach());
		SmartDashboard.putData("Auto mode", chooser);

		// Set dataLogger and Time information
		TimeZone.setDefault(TimeZone.getTimeZone("America/Detroit"));

		File logDirectory = null;
		if (logDirectory == null)
			logDirectory = findLogDirectory(new File("/u"));
		if (logDirectory == null)
			logDirectory = findLogDirectory(new File("/v"));
		if (logDirectory == null)
			logDirectory = findLogDirectory(new File("/x"));
		if (logDirectory == null)
			logDirectory = findLogDirectory(new File("/y"));
		if (logDirectory == null) {
			logDirectory = new File("/home/lvuser/logs");
			if (!logDirectory.exists()) {
				logDirectory.mkdir();
			}
		}
		if (logDirectory != null && logDirectory.isDirectory()) {
			String logMessage = String.format("Log directory is %s\n", logDirectory);
			System.out.print(logMessage);
			dataLogger = new DataLogger(logDirectory);
			dataLogger.setMinimumInterval(1000);
		}
		
		// Subsystem specific initializing methods
		Robot.shooter.init();

	}

	/**
	 * This function is called when the disabled button is hit. You can use it
	 * to reset subsystems before shutting down.
	 */
	@Override
	public void disabledInit() {

	}

	@Override
	public void disabledPeriodic() {
		Scheduler.getInstance().run();
	}

	@Override
	public void autonomousInit() {
		// schedule the autonomous command (example)
		autonomousCommand = (Command) chooser.getSelected();
		autonomousCommand.start();
	}

	/**
	 * This function is called periodically during autonomous
	 */
	@Override
	public void autonomousPeriodic() {
		Scheduler.getInstance().run();
	}

	@Override
	public void teleopInit() {
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
		if (autonomousCommand != null)
			autonomousCommand.cancel();
		
	}

	/**
	 * This function is called periodically during operator control
	 */
	@Override
	public void teleopPeriodic() {
		Scheduler.getInstance().run();

		if (dataLogger.shouldLogData()) {
			dataLogger.addDataItem("ShooterPeriod", Robot.shooter.getPeriod());
			dataLogger.addDataItem("rightDriveCurrent", Robot.pdp.getCurrent(0));
			dataLogger.saveDataItems();
		}
		
		Robot.gatherer.updateDashboard();

	}

	/**
	 * This function is called periodically during test mode
	 */
	@Override
	public void testPeriodic() {
		LiveWindow.run();
	}

	public File findLogDirectory(File root) {
		// does the root directory exist?
		if (!root.isDirectory())
			return null;

		File logDirectory = new File(root, "logs");
		if (!logDirectory.isDirectory())
			return null;

		return logDirectory;
	}
}
