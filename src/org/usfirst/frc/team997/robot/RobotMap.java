// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team997.robot;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.VictorSP;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainLeftMotors;
    public static SpeedController driveTrainRightMotors;
    public static RobotDrive driveTrainRobotDrive;
    public static Encoder driveTrainLeftDriveEncoder;
    public static Encoder driveTrainRightDriveEncoder;
    public static Ultrasonic driveTrainUltrasonic;
    public static SpeedController gathererArmAngleMotor;
    public static AnalogPotentiometer gathererArmAngleSensor;
    public static SpeedController gathererGathererWheelMotor;
    public static AnalogPotentiometer shooterAngleSensor;
    public static SpeedController shooterAngleMotor;
    public static SpeedController shooterShooterMotor;
    public static DigitalInput shooterSpeedSensor;
    public static Servo shooterBallControlServoL;
    public static Servo shooterBallControlServoR;
    public static AnalogInput shooterBallDistSensor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
	// Add in a map to the PDP port used by the motors 
	// (so we can get the motor current)
	public static final int	pdpDriveLeftFront 	= 0,
							pdpDriveLeftRear 	= 1,
							pdpDriveRightFront 	= 2,
							pdpDriveRightRear  	= 3,
							pdpShooterWheelsL   = 4,
							pdpShooterWheelsR   = 5,
							pdpShooterAngle		= 6,
							pdpGatherWheels     = 7,
							pdpGatherAngle0		= 8,
							pdpGatherAngle1		= 9,
							pdpCameraLight		= 10;
	
	// Add in some soft (software managed) limits for either position
	// or current.
	public static final double gatherDownLimit 			= 0;
	public static final double gatherUpLimit 			= 1.0;
	public static final double gatherAngleCurrentLimit 	= 40;
	public static final double gathererAngleTolerance 	= 0.2;
	public static final double gatherWheelsCurrentLimit = 20;
	public static final double shooterStartup 			= 0.5;
	public static final double shooterDownLimit 		= 0;
	public static final double shooterUpLimit 			= 0.5;
	public static final double shooterAngleCurrentLimit = 40;
	public static final double shooterAngleTolerance 	= 0.2;
	public static final double shooterServoFirePoint 	= 0.8;
	public static final double shooterServoNeutralPoint = 0.5;
	public static final double shooterServoCapturePoint = 0.2;

	public static void init() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeftMotors = new VictorSP(0);
        LiveWindow.addActuator("DriveTrain", "LeftMotors", (VictorSP) driveTrainLeftMotors);
        
        driveTrainRightMotors = new VictorSP(1);
        LiveWindow.addActuator("DriveTrain", "RightMotors", (VictorSP) driveTrainRightMotors);
        
        driveTrainRobotDrive = new RobotDrive(driveTrainLeftMotors, driveTrainRightMotors);
        
        driveTrainRobotDrive.setSafetyEnabled(false);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setMaxOutput(1.0);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        driveTrainLeftDriveEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "LeftDriveEncoder", driveTrainLeftDriveEncoder);
        driveTrainLeftDriveEncoder.setDistancePerPulse(1.0);
        driveTrainLeftDriveEncoder.setPIDSourceType(PIDSourceType.kRate);
        driveTrainRightDriveEncoder = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "RightDriveEncoder", driveTrainRightDriveEncoder);
        driveTrainRightDriveEncoder.setDistancePerPulse(1.0);
        driveTrainRightDriveEncoder.setPIDSourceType(PIDSourceType.kRate);
        driveTrainUltrasonic = new Ultrasonic(6, 7);
        LiveWindow.addSensor("DriveTrain", "Ultrasonic", driveTrainUltrasonic);
        
        gathererArmAngleMotor = new Talon(3);
        LiveWindow.addActuator("Gatherer", "ArmAngleMotor", (Talon) gathererArmAngleMotor);
        
        gathererArmAngleSensor = new AnalogPotentiometer(2, 1.0, 0.0);
        LiveWindow.addSensor("Gatherer", "ArmAngleSensor", gathererArmAngleSensor);
        
        gathererGathererWheelMotor = new Talon(4);
        LiveWindow.addActuator("Gatherer", "GathererWheelMotor", (Talon) gathererGathererWheelMotor);
        
        shooterAngleSensor = new AnalogPotentiometer(1, 1.0, 0.0);
        LiveWindow.addSensor("Shooter", "AngleSensor", shooterAngleSensor);
        
        shooterAngleMotor = new Talon(5);
        LiveWindow.addActuator("Shooter", "AngleMotor", (Talon) shooterAngleMotor);
        
        shooterShooterMotor = new VictorSP(2);
        LiveWindow.addActuator("Shooter", "ShooterMotor", (VictorSP) shooterShooterMotor);
        
        shooterSpeedSensor = new DigitalInput(4);
        LiveWindow.addSensor("Shooter", "SpeedSensor", shooterSpeedSensor);
        
        shooterBallControlServoL = new Servo(8);
        LiveWindow.addActuator("Shooter", "BallControlServoL", shooterBallControlServoL);
        
        shooterBallControlServoR = new Servo(9);
        LiveWindow.addActuator("Shooter", "BallControlServoR", shooterBallControlServoR);
        
        shooterBallDistSensor = new AnalogInput(3);
        LiveWindow.addSensor("Shooter", "BallDistSensor", shooterBallDistSensor);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		
	}
}
