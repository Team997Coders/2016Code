// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team997.robot;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.smartdashboard.*;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static AnalogGyro drivetrainAnalogGyro1;
    public static SpeedController drivetrainLeftMotorPort;
    public static SpeedController drivetrainRightMotorPort;
    public static RobotDrive drivetrainRobotDrive21;
    public static Encoder drivetrainLeftDriveEncoder;
    public static Encoder drivetrainRightDriveEncoder;
    public static Ultrasonic drivetrainUltrasonic;
    public static SpeedController gathererArmAngleMotor;
    public static AnalogPotentiometer gathererArmAngleSensor;
    public static PIDController gathererArmPositionController;
    public static SpeedController gathererGathererWheelMotor;
    public static SpeedController shooterShooterMotorPort;
    public static SpeedController shooterShooterAngleMotorPort;
    public static AnalogPotentiometer shooterShooterAngleSensor;
    public static PIDController shooterShooterAngleController;
    public static DigitalInput shooterShooterSpeedSensor;
    public static DigitalInput shooterBallSensor;
    public static Servo shooterBallControlServoL;
    public static Servo shooterBallControlServoR;
    public static PowerDistributionPanel miscPowerPanel;
    public static Relay miscLightControlSpike;
    public static Relay miscCameraLightsSpike;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrainAnalogGyro1 = new AnalogGyro(0);
        LiveWindow.addSensor("Drivetrain", "AnalogGyro1", drivetrainAnalogGyro1);
        drivetrainAnalogGyro1.setSensitivity(0.007);
        drivetrainLeftMotorPort = new VictorSP(0);
        LiveWindow.addActuator("Drivetrain", "LeftMotorPort", (VictorSP) drivetrainLeftMotorPort);
        
        drivetrainRightMotorPort = new VictorSP(1);
        LiveWindow.addActuator("Drivetrain", "RightMotorPort", (VictorSP) drivetrainRightMotorPort);
        
        drivetrainRobotDrive21 = new RobotDrive(drivetrainLeftMotorPort, drivetrainRightMotorPort);
        
        drivetrainRobotDrive21.setSafetyEnabled(false);
        drivetrainRobotDrive21.setExpiration(0.1);
        drivetrainRobotDrive21.setSensitivity(0.5);
        drivetrainRobotDrive21.setMaxOutput(1.0);

        drivetrainLeftDriveEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Drivetrain", "LeftDriveEncoder", drivetrainLeftDriveEncoder);
        drivetrainLeftDriveEncoder.setDistancePerPulse(1.0);
        drivetrainLeftDriveEncoder.setPIDSourceType(PIDSourceType.kRate);
        drivetrainRightDriveEncoder = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("Drivetrain", "RightDriveEncoder", drivetrainRightDriveEncoder);
        drivetrainRightDriveEncoder.setDistancePerPulse(1.0);
        drivetrainRightDriveEncoder.setPIDSourceType(PIDSourceType.kRate);
        drivetrainUltrasonic = new Ultrasonic(6, 7);
        LiveWindow.addSensor("Drivetrain", "Ultrasonic", drivetrainUltrasonic);
        
        gathererArmAngleMotor = new Talon(2);
        LiveWindow.addActuator("Gatherer", "ArmAngleMotor", (Talon) gathererArmAngleMotor);
        
        gathererArmAngleSensor = new AnalogPotentiometer(3, 1.0, 0.0);
        LiveWindow.addSensor("Gatherer", "ArmAngleSensor", gathererArmAngleSensor);
        
        gathererArmPositionController = new PIDController(1.0, 0.0, 0.0, 0.0, gathererArmAngleSensor, gathererArmAngleMotor, 0.02);
        LiveWindow.addActuator("Gatherer", "ArmPositionController", gathererArmPositionController);
        gathererArmPositionController.setContinuous(false);
        gathererArmPositionController.setAbsoluteTolerance(0.2);

        gathererArmPositionController.setOutputRange(-1.0, 1.0);
        gathererGathererWheelMotor = new Talon(5);
        LiveWindow.addActuator("Gatherer", "GathererWheelMotor", (Talon) gathererGathererWheelMotor);
        
        shooterShooterMotorPort = new Talon(3);
        LiveWindow.addActuator("Shooter", "ShooterMotorPort", (Talon) shooterShooterMotorPort);
        
        shooterShooterAngleMotorPort = new Talon(4);
        LiveWindow.addActuator("Shooter", "ShooterAngleMotorPort", (Talon) shooterShooterAngleMotorPort);
        
        shooterShooterAngleSensor = new AnalogPotentiometer(2, 1.0, 0.0);
        LiveWindow.addSensor("Shooter", "ShooterAngleSensor", shooterShooterAngleSensor);
        
        shooterShooterAngleController = new PIDController(1.0, 0.0, 0.0, 0.0, shooterShooterAngleSensor, shooterShooterAngleMotorPort, 0.02);
        LiveWindow.addActuator("Shooter", "ShooterAngleController", shooterShooterAngleController);
        shooterShooterAngleController.setContinuous(false);
        shooterShooterAngleController.setAbsoluteTolerance(0.2);

        shooterShooterAngleController.setOutputRange(-1.0, 1.0);
        shooterShooterSpeedSensor = new DigitalInput(4);
        LiveWindow.addSensor("Shooter", "ShooterSpeedSensor", shooterShooterSpeedSensor);
        
        shooterBallSensor = new DigitalInput(5);
        LiveWindow.addSensor("Shooter", "BallSensor", shooterBallSensor);
        
        shooterBallControlServoL = new Servo(6);
        LiveWindow.addActuator("Shooter", "BallControlServoL", shooterBallControlServoL);
        
        shooterBallControlServoR = new Servo(7);
        LiveWindow.addActuator("Shooter", "BallControlServoR", shooterBallControlServoR);
        
        miscPowerPanel = new PowerDistributionPanel(0);
        LiveWindow.addSensor("Misc", "PowerPanel", miscPowerPanel);
        
        miscLightControlSpike = new Relay(0);
        LiveWindow.addActuator("Misc", "LightControlSpike", miscLightControlSpike);
        
        miscCameraLightsSpike = new Relay(1);
        LiveWindow.addActuator("Misc", "CameraLightsSpike", miscCameraLightsSpike);
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
