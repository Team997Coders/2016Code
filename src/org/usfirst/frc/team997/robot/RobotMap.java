// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team997.robot;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.VictorSP;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Counter;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static AnalogGyro driveTrainDriveGyro;
	public static SpeedController driveTrainLeftMotors;
	public static SpeedController driveTrainRightMotors;
	public static RobotDrive driveTrainRobotDrive;
	public static Encoder driveTrainLeftDriveEncoder;
	public static Encoder driveTrainRightDriveEncoder;
	public static Ultrasonic driveTrainUltrasonic;
	public static SpeedController gathererArmAngleMotor;
	public static AnalogPotentiometer gathererArmAngleSensor;
	public static PIDController gathererArmPositionController;
	public static SpeedController gathererGathererWheelMotor;
	public static SpeedController shooterShooterMotor;
	public static SpeedController shooterAngleMotor;
	public static AnalogPotentiometer shooterAngleSensor;
	public static PIDController shooterAngleController;
	public static DigitalInput shooterSpeedSensor;
	public static Servo shooterBallControlServoL;
	public static Servo shooterBallControlServoR;
	public static AnalogInput shooterBallDistSensor;
	public static Relay miscLightControlSpike;
	public static Relay miscCameraLightsSpike;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static Counter shooterCounter;

	public static void init() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		driveTrainDriveGyro = new AnalogGyro(0);
		LiveWindow.addSensor("DriveTrain", "DriveGyro", driveTrainDriveGyro);
		driveTrainDriveGyro.setSensitivity(0.007);
		driveTrainLeftMotors = new VictorSP(0);
		LiveWindow.addActuator("DriveTrain", "LeftMotors", (VictorSP) driveTrainLeftMotors);

		driveTrainRightMotors = new VictorSP(1);
		LiveWindow.addActuator("DriveTrain", "RightMotors", (VictorSP) driveTrainRightMotors);

		driveTrainRobotDrive = new RobotDrive(driveTrainLeftMotors, driveTrainRightMotors);

		driveTrainRobotDrive.setSafetyEnabled(false);
		driveTrainRobotDrive.setExpiration(0.1);
		driveTrainRobotDrive.setSensitivity(0.5);
		driveTrainRobotDrive.setMaxOutput(1.0);
		driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
		driveTrainLeftDriveEncoder = new Encoder(0, 1, false, EncodingType.k4X);
		LiveWindow.addSensor("DriveTrain", "LeftDriveEncoder", driveTrainLeftDriveEncoder);
		driveTrainLeftDriveEncoder.setDistancePerPulse(1.0);
		driveTrainLeftDriveEncoder.setPIDSourceType(PIDSourceType.kRate);
		driveTrainRightDriveEncoder = new Encoder(2, 3, false, EncodingType.k4X);
		LiveWindow.addSensor("DriveTrain", "RightDriveEncoder", driveTrainRightDriveEncoder);
		driveTrainRightDriveEncoder.setDistancePerPulse(1.0);
		driveTrainRightDriveEncoder.setPIDSourceType(PIDSourceType.kRate);
		driveTrainUltrasonic = new Ultrasonic(6, 7);
		LiveWindow.addSensor("DriveTrain", "Ultrasonic", driveTrainUltrasonic);

		gathererArmAngleMotor = new Talon(2);
		LiveWindow.addActuator("Gatherer", "ArmAngleMotor", (Talon) gathererArmAngleMotor);

		gathererArmAngleSensor = new AnalogPotentiometer(2, 1.0, 0.0);
		LiveWindow.addSensor("Gatherer", "ArmAngleSensor", gathererArmAngleSensor);

		gathererArmPositionController = new PIDController(1.0, 0.0, 0.0, 0.0, gathererArmAngleSensor,
				gathererArmAngleMotor, 0.02);
		LiveWindow.addActuator("Gatherer", "ArmPositionController", gathererArmPositionController);
		gathererArmPositionController.setContinuous(false);
		gathererArmPositionController.setAbsoluteTolerance(0.2);

		gathererArmPositionController.setInputRange(0.0, 5.0);
		gathererArmPositionController.setOutputRange(-1.0, 1.0);
		gathererGathererWheelMotor = new VictorSP(5);
		LiveWindow.addActuator("Gatherer", "GathererWheelMotor", (VictorSP) gathererGathererWheelMotor);

		shooterShooterMotor = new VictorSP(3);
		LiveWindow.addActuator("Shooter", "ShooterMotor", (VictorSP) shooterShooterMotor);

		shooterAngleMotor = new Talon(4);
		LiveWindow.addActuator("Shooter", "AngleMotor", (Talon) shooterAngleMotor);

		shooterAngleSensor = new AnalogPotentiometer(1, 1.0, 0.0);
		LiveWindow.addSensor("Shooter", "AngleSensor", shooterAngleSensor);

		shooterAngleController = new PIDController(1.0, 0.0, 0.0, 0.0, shooterAngleSensor, shooterAngleMotor, 0.02);
		LiveWindow.addActuator("Shooter", "AngleController", shooterAngleController);
		shooterAngleController.setContinuous(false);
		shooterAngleController.setAbsoluteTolerance(0.2);

		shooterAngleController.setInputRange(0.0, 5.0);
		shooterAngleController.setOutputRange(-1.0, 1.0);
		shooterSpeedSensor = new DigitalInput(4);
		LiveWindow.addSensor("Shooter", "SpeedSensor", shooterSpeedSensor);

		shooterBallControlServoL = new Servo(6);
		LiveWindow.addActuator("Shooter", "BallControlServoL", shooterBallControlServoL);

		shooterBallControlServoR = new Servo(7);
		LiveWindow.addActuator("Shooter", "BallControlServoR", shooterBallControlServoR);

		shooterBallDistSensor = new AnalogInput(3);
		LiveWindow.addSensor("Shooter", "BallDistSensor", shooterBallDistSensor);

		miscLightControlSpike = new Relay(0);
		LiveWindow.addActuator("Misc", "LightControlSpike", miscLightControlSpike);

		miscCameraLightsSpike = new Relay(1);
		LiveWindow.addActuator("Misc", "CameraLightsSpike", miscCameraLightsSpike);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

		// Add in the counter to track the shooter wheel speed
		shooterCounter = new Counter();
		shooterCounter.setSamplesToAverage(15);
		shooterCounter.setUpSource(shooterSpeedSensor);
		shooterCounter.setDistancePerPulse(1);

	}
}
